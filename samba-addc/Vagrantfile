# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'lxc'

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "obnox/fedora23-64-lxc"
  #config.vm.box = "local-f23"

# if Vagrant.has_plugin?("vagrant-cachier")
#   # Configure cached packages to be shared between instances of the same base box.
#   # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
#   config.cache.scope = :box
#
#   # OPTIONAL: If you are using VirtualBox, you might want to use that to enable
#   # NFS for shared folders. This is also very useful for vagrant-libvirt if you
#   # want bi-directional sync
#   config.cache.synced_folder_opts = {
#     type: :nfs,
#     # The nolock option can be useful for an NFSv3 client that wants to avoid the
#     # NLM sideband protocol. Without this option, apt-get might hang if it tries
#     # to lock files needed for /var/cache/* operations. All of this can be avoided
#     # by using NFSv4 everywhere. Please note that the tcp option is not the default.
#     mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
#   }
#   # For more information please check http://docs.vagrantup.com/v2/synced-folders/basic_usage.html
# end

  config.vm.define "smbdc" do |server|
    server.vm.hostname = "smbdc.samba.site"

    server.vm.provider :lxc do |lxc|
      lxc.container_name = :machine
      lxc.customize "network.hwaddr", "00:16:3e:8a:18:16"
    end
  end

  config.vm.define "smbcli" do |server|
    server.vm.hostname = "smbcli.samba.site"

    server.vm.provider :lxc do |lxc|
      lxc.container_name = :machine
    end
  end

  config.vm.define "ipadc" do |server|
    server.vm.hostname = "ipadc.ipa.site"

    server.vm.provider :lxc do |lxc|
      lxc.container_name = :machine
      lxc.customize "network.hwaddr", "00:16:3e:8a:18:17"
    end
  end

  config.vm.define "ipacli" do |server|
    server.vm.hostname = "ipacli.ipa.site"

    server.vm.provider :lxc do |lxc|
      lxc.container_name = :machine
    end
  end

# config.vm.provision "shell" do |s|
#   s.name = "Provision ansible requirements"
#   s.inline = "sudo dnf -y install python-dnf"
# end

  config.vm.provision "ansible" do |ansible|
      ansible.groups = {
          "smbdc" => ["smbdc"],
          "smbcli" => ["smbcli"],
          "ipadc" => ["ipadc"],
          "ipacli" => ["ipacli"],
      }

      ansible.playbook = "../ansible/lxc/samba-addc.yml"

      ansible.extra_vars = {
        smbdc_realm: 'SAMBA.SITE',
        smbdc_netbios: 'SAMBADOMAIN',
        smbdc_domain: 'samba.site',
        smbdc_password: 'passw0rd!',
        smbdc_forwarder: '192.168.122.1',

        smbcli_realm: 'SAMBA.SITE',
        smbcli_domain: 'samba.site',
        smbcli_password: 'passw0rd!',
        smbcli_dc_ipv4: '192.168.122.10',

        ipadc_fqdn: 'ipadc.ipa.site',
        ipadc_realm: 'IPA.SITE',
        ipadc_domain: 'ipa.site',
        ipadc_password: 'passw0rd!',
        ipadc_forwarder: '192.168.122.1',

        ipadc_trust_forwarder: '192.168.122.10',
        ipadc_trust_realm: 'SAMBA.SITE',
        ipadc_trust_domain: 'samba.site',
        ipadc_trust_netbios: 'IPADOMAIN',
        ipadc_trust_admin: 'Administrator',
        ipadc_trust_password: 'passw0rd!',

        ipacli_fqdn: 'ipacli.ipa.site',
        ipacli_realm: 'IPA.SITE',
        ipacli_domain: 'ipa.site',
        ipacli_password: 'passw0rd!',
        ipacli_dc_ipv4: '192.168.122.20',
      }
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
